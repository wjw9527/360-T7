#
# Copyright (c) 2019-2020 P3TERX <https://p3terx.com>
#
# This is free software, licensed under the MIT License.
# See /LICENSE for more information.
#
# https://github.com/P3TERX/Actions-OpenWrt
# Description: Build OpenWrt using GitHub Actions
#

name: ax6000-hanwckf

#on:
#  repository_dispatch:
#  workflow_dispatch:
#    inputs:
#      ssh:
#        description: 'SSH connection to Actions'
#        required: false
#        default: 'false'


on:
  repository_dispatch:
  workflow_dispatch:
  #定时触发开始编译
  #schedule:
  #  - cron: 0 12 */7 * *
  #加星触发开始编译
  watch:
    types: [started]

env:
  REPO_URL: https://github.com/hanwckf/immortalwrt-mt798x
  REPO_BRANCH: openwrt-21.02
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: ./config/Redmi-AX6000-hanwckf.config
  DIY_P1_SH: ./diy/Redmi-AX6000-hanwckf-1.sh
  DIY_P2_SH: ./diy/Redmi-AX6000-hanwckf-2.sh
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: true
  UPLOAD_RELEASE: true
  SCKEY: ${{ secrets.SCKEY }}
  BARK_TOKEN: ${{ secrets.BARK_TOKEN }}
  TZ: Asia/Shanghai
  
jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
    - name: 检查
      uses: actions/checkout@main
    
    - name: 安装编译环境
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
        sudo bash -c 'bash <(curl -s https://build-scripts.immortalwrt.eu.org/init_build_environment.sh)'
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir
    
    - name: BARK 通知
      if: env.BARK_TOKEN
      continue-on-error: true
      run: |
        curl -k https://api.day.app/${{ env.BARK_TOKEN }}/🎉开始编译hanwckf固件
        
    
    - name: 下载源码
      working-directory: /workdir
      run: |
        df -hT $PWD
        git clone $REPO_URL -b $REPO_BRANCH openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt

    #- name: 加载软件源
    #  run: |
    #    #[ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default
        #chmod +x $DIY_P1_SH
        #cd openwrt
        #$GITHUB_WORKSPACE/$DIY_P1_SH

    - name: 更新软件源
      run: cd openwrt && ./scripts/feeds update -a

    - name: 安装软件源
      run: cd openwrt && ./scripts/feeds install -a

    - name: 加载自定义配置
      run: |
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
        chmod +x $DIY_P2_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P2_SH

    - name: 下载包
      id: package
      run: |
        cd openwrt
        make defconfig
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: 编译固件
      id: compile
      run: |
        cd openwrt
        echo -e "$(nproc) thread compile"
        make -j$(nproc) || make -j1 || make -j1 V=s || (curl -k https://api.day.app/${{ env.BARK_TOKEN }}/编译hanwckf固件失败;exit 1)
        echo "status=success" >> $GITHUB_OUTPUT

    - name: 检查可用容量
      if: (!cancelled())
      run: df -hT

    - name: 组织文件
      id: organize
      if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      run: |
        cd openwrt/bin/targets/*/*
        echo "-------------固件列表------------------"
        ls -alh
        echo "-------------固件列表------------------"
        rm -rf packages
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "status=success" >> $GITHUB_OUTPUT

    - name: 上传固件
      uses: actions/upload-artifact@main
      if: steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: ax6000-hanwckf-OpenWrt
        path: ${{ env.FIRMWARE }}

    - name: 生成标签
      id: tag
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      run: |
        time=$(date +%Y-%m-%d)
        Rtime=$(date +%Y-%m-%d-%H-%M)
        release_tag="ax6000-hanwckf-$Rtime"
        release_name="ax6000-hanwckf-$Rtime"
        echo "默认网关：192.168.10.1
        默认密码：password" >> release.txt
        echo "release_name=$release_name" >> $GITHUB_OUTPUT
        echo "release_tag=$release_tag" >> $GITHUB_OUTPUT
        echo "status=success" >> $GITHUB_OUTPUT
        
    - name: 上传固件至项目
      uses: softprops/action-gh-release@v1
      if: steps.tag.outputs.status == 'success' && !cancelled()
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        name: ${{ steps.tag.outputs.release_name }} 
        tag_name: ${{ steps.tag.outputs.release_tag }}
        body_path: release.txt
        files: ${{ env.FIRMWARE }}/*

    - name: BARK 通知
      if: env.BARK_TOKEN
      continue-on-error: true
      run: |
        curl -k https://api.day.app/${{ env.BARK_TOKEN }}/🎉编译固件完成
        
